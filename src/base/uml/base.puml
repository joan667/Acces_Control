@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

class Main {
+ {static} main(args : String)
}

class Webserver {
- {static} PORT :int
- {static} FORMATTER : DateTimeFormatter
+ Webserver()
}

class SocketThread {
- insocked : Socked
- makeRequest(tokens : String[]) : Request
- makeRequestReader(tokens : String[]) : RequestReader
- makeRequestArea(tokens : String[]) : RequestArea
- makeHeaderAnswer() : String
- makeJsonAnswer(request : Request) : String
+ run()
}

Webserver +-right- SocketThread

note right of SocketThread
inner class
of Webserver
end note

note right of Main::main
DirectoryAreas.makeAreas()
DiretoryUserGroups.makeUserGroups()
new Webserver()
end note

Main --> Webserver : "new Webserver()"

Main -[hidden]down- Webserver





'CUSTOM UML

static class DirectoryAreas {
- {static} rootArea : Area
- {static} areas : Area[]
- {static} doors : Door[]
+ {static} importAreas(filename : String)
+ {static} makeAreas()
+ {static} findAreaById(id : String) : Area
+ {static} findDoorById(id : String) : Door
+ {static} getRootArea() : Area
+ {static} getAllPartitions() : Partition[]
+ {static} getAllSpaces() : Space[]
+ {static} getAllDoors() : Door[]
}

Main --> DirectoryAreas : "makeAreas"
DirectoryAreas --> Area : "rootArea"
DirectoryAreas --> "*" Area : "areas"
DirectoryAreas --> "*" Door : "doors"

abstract class Area {
# id : String
# parents : Partition[]
+ Area(id : String)
+ Area(id : String, ...parents : Partition[])
+ addParent(parent : Partition)
+ getId() : String
+ getParents() : Partition[]
+ getDoors() : Door[]
}

Area --> "*" Partition : "parents"

class Partition extends Area {
- areas : Area[]
+ Partition(id : String)
+ Partition(id : String, ...parents : Partition[])
+ addPartition(partition : Partition)
+ addSpace(space : Space)
+ addChild(area : Area)
+ getPartitions() : Partition[]
+ getSpaces() : Space[]
+ getDoors() : Door[]
}

Partition --> "*" Area : "areas"
Partition -[hidden]up- Area

class Space extends Area {
- doors : Door[]
+ Space(id : String)
+ Space(id : String, ...parents : Partition[])
+ addDoor(door : Door)
+ getDoors() : Door[]
}

Space --> "*" Door : "doors"

class Door {
- id : String
- closed : boolean
- doorState : DoorState
- from : Space
- to : Space
+ Door(id : String, from : Space, to : Space)
+ processRequest(request : RequestReader)
+ doAction(action : String)
+ isClosed() : boolean
+ setDoorState(doorState : DoorState)
+ setFromSpace(to : Space)
+ setToSpace(to : Space)
+ getId() : String
+ getFromSpace() : Space
+ getToSpace() : Space
+ getStateName() : String
+ toString() : String
+ toJson() : JSONObject
}

Door --> DoorState : "doorState"
Door --> Space : "from"
Door --> Space : "to"

abstract class DoorState {
# door : Door
+ DoorState(door : Door)
+ open()
+ close()
+ lock()
+ unlock()
+ unlockShortly()
+ getStateName() : String
}

DoorState --> Door : "door"

static class States {
- {static} LOCKED : String
- {static} UNLOCKED : String
- {static} PROPPED : String
- {static} UNLOCKED_SHORTLY : String
}

class LockedState extends DoorState {
+ LockedState(door : Door)
+ open()
+ lock()
}

class UnlockedState extends DoorState {
+ UnlockedState(door : Door)
+ unlock()
+ unlockShortly()
}

class ProppedState extends DoorState {
+ ProppedState(door : Door)
+ close()
+ lock()
}

interface Observerable {
+ update()
}

class UnlockedShortlyState extends DoorState implements Observerable {
+ UnlockedShortlyState(door : Door)
+ update()
+ lock()
+ unlock()
+ unlockShortly()
- startTimer()
- resetTimer()
- stopTimer()
}

LockedState --> States : name
UnlockedState --> States : name
ProppedState --> States : name
UnlockedShortlyState --> States : name

interface TimedEvent {
+ isExpired() : boolean
+ notifyExpired()
}

class Clock implements TimedEvent {
- endTime : Long
- observerable : Observerable
+ Clock(endTime : Long, observerable : Observerable)
+ isExpired() : Boolean
+ notifyExpired()
+ reset(millis : Int)
+ stop()
+ cancel()
}

Clock --> Observerable : "observerable"
UnlockedShortlyState --> Clock : "clock"

class Observer {
- instance : Observer
- timedEvents : TimedEvent[]
- running : Boolean
+ Observer()
+ getInstance() : Observer
+ addTimedEvent(timedEvent : TimedEvent)
+ removeTimedEvent(timedEvent : TimedEvent)
+ run()
+ stop()
}

Observer --> Observer : "instance"
Clock --> Observer : "getInstance()"

static class DirectoryUserGroups {
- {static} userGroups : UserGroup[]
- {static} users : User[]
+ {static} makeUserGroups()
+ {static} findUserByCredential(credential : String) : User
}

Main --> DirectoryUserGroups : "makeUserGroups"
DirectoryUserGroups --> "*" UserGroup : "userGroups"

class UserGroup {
- id : String
- schedule : Schedule
- users : User[]
- areas : Area[]
- actions : String[]
+ UserGroup(id : String, schedule : Schedule)
+ UserGroup(id : String, schedule : Schedule, ...users : User[])
+ addUser(user : User)
+ removeUser(user : User)
+ addArea(area : Area)
+ addAreas(areas : Area[])
+ removeArea(area : Area)
+ addAction(action : String)
+ addActions(actions : String[])
+ removeAction(action : String)
+ hasAccess(space : Space) : boolean
+ canPerform(action : String, datetime : LocalDateTime) : boolean
+ getUsers() : User[]
}

UserGroup --> "*" User : "users"
UserGroup --> "*" Area : "areas"

class Actions {
- {static} OPEN : String
- {static} CLOSE : String
- {static} LOCK : String
- {static} UNLOCK : String
- {static} UNLOCK_SHORTLY : String
}

UserGroup --> Actions : "canPerform()"

class User {
- name : String
- credential : String
- group : UserGroup
+ User(name : String, credential : String)
+ User(name : String, credential : String, group : UserGroup)
+ hasAccess(space : Space) : boolean
+ canPerform(action : String, datetime : LocalDateTime) : boolean
+ setGroup(group : UserGroup)
+ getName() : String
+ getCredential() : String
+ getGroup() : UserGroup
+ toString() : String
}

User --> UserGroup : "group"

class Day {
+ MONDAY : Int
+ TUESDAY : Int
+ WEDNESDAY : Int
+ THURSDAY : Int
+ FRIDAY : Int
+ SATURDAY : Int
+ SUNDAY : Int
- day : Int
+ Day(day : Int)
+ getWeekDays() : Day[]
+ getWeekendDays() : Day[]
+ getAllDays() : Day[]
+ getDay() : Int
}

class DaySchedule {
- day : Day
- start : Int
- end : Int
+ DaySchedule(day : Day, start : Int, end : Int)
+ isInSchedule(datetime : LocalDateTime) : boolean
+ getDay() : Day
+ getStart() : Int
+ getEnd() : Int
}

DaySchedule --> Day : "day"

class Schedule {
+ start : LocalDate
+ end : LocalDate
+ daySchedules : DaySchedule[]
+ Schedule(start : LocalDate, end : LocalDate)
+ Schedule(start : LocalDate, end : LocalDate, daySchedules : DaySchedule[])
+ add(daySchedule : DaySchedule)
+ isInSchedule(datetime : LocalDateTime) : boolean
}

Schedule --> "*" DaySchedule : "daySchedules"
UserGroup --> Schedule : "schedule"


Main -[hidden]down- DirectoryAreas
DirectoryAreas -[hidden]down- Area
Partition -[hidden]right- Space
DoorState -[hidden]right- Door

@enduml
